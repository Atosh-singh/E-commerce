
Project

Parsing incoming request

Validating user input

NPM repository- that is a cloud package repository

Third party package that helps us to save automatically without restarting our server---
for this autostart maechanism package called == nodemon
npm install nodemon

Packages which you install can be divided into development packages, so packages which mostly helps you during development and production dependencies
so packages that helps you for the app as it's running on a server,

nodemon would be a development dependency because we only use it during development process

npm install nodemon --save      = this would install it as a production dependency
npm install nodemon --save-dev  = this only adds something we used during development
npm install nodemon -g          = not install in this project but globally on your machine

install express.Js  = npm install --save express
--save = used in a production dependency

--save-dev = used tool during development 

Middleware means that an incoming request automatically funneled through a bunch of functions by express.js



Framework: Helper functions, tools and rules that help you build your application!


Send File or to serve a HTML page we use
sendFile()   =   send back a file to the user

an absolute path would be correct but / like this actually refers to our root folder on our operating system not to this project folder.

so in order to construct path to the directory and to the file, we can use a feature provided by node.js another core module.

const path = reqiuring('path')    => we can send the with the help of path create by this module by calling th join() method.



res.sendFile(path.join(__dirname,'views', 'shop.html'));
it works on both linux and windows system
Path join basically detects the operating system you are running on and then automatically builds the correct path.

router.get("/", (req, res, next) => {
  res.sendFile(path.join(__dirname, "../", "views", "shop.html"));
});

const path = require('path')   => to get the file location 


USING A HELPER FUNCTION FOR NAVIGATION

dirname()   = return the directory name of a path


const path = require("path");

module.exports = path.dirname(process.mainModule.filename);
this gives us the path to the file that is responsible for the fact that our application is running
and this filename is what we put into dirname to get a path to that directory.


STYLING OUR PAGES ==== CSS

SERVING FILES STATISCALLY

we need to be serve file statically and statically means not handled not handled by the express router or some othe middleware but instead directly forwarde to the file system
 
And for this, we register a new middleware with app use and this is one express.js ships with, we use express object itself and this does have a static middleware and this is a built in middleware

app.use(express.static(path.join(__dirname, "public")));

MODULE SUMMARY
Express.js == is node.js framework - a package that adds a bunch of utility functions that adds a bunch of utility functions and tools and a clear set of rules on how the apps should be built (middleware)
It's highly extensible and other packages can be plugged into it(middleware) 

MIDDLEWARE, next() and res()
Express.js relies heavily on middleware functions- you can easily add them by calling use()
Middleware functions handle a request and should call next() to forward the request to the next function in line or send a response


ROUTING
you can filter request by path and method
if you filter by method,paths are matched exactly, otherwise, the first segment of URL is matched
You can use the express.Router to split your routes across files elegantly

SERVE FILES
you are not limited to serving DUMMY text as a response
You can sendFile()s to your user - e.g. HTML files
If a request is directly made for a file (e.g. a .css file is requested), you can enable static serving for such files via express.static()


WORKING WITH DYNAMIC CONTENT AND ADDING TEMPLATING ENGINES

Managing Data(without a Database)
Render Dynamic Content in our views
Understanding Templating Engines

SHaring Data Across Request And Users

Templating Engines

Available Templating Engines

EJS          <p><%=name %></p>      Use normal HTML and plain javascript in your templates

Pug           p  #{name}            Use minimal HTML and custom template language 
 
Handlebars   <p>{{ name }}</p>      Use normal HTML and custom template language



Installing and Implementing Pug

Install all three

npm install --save ejs pug express-handlebars        =   production dependency

you can install multiple packages by simply repeating or by adding all the names after npm install 



PUG

app.set();     = app.set() allows us to set any value globally on our express application


ADDING A LAYOUT

Use Dynamic Content from temlating engines

WORKING WITH HANDLEBARS

Due to a (temporary) breaking change introduced by the library authors (of the package we'll install in the next lecture), make sure you run 
    npm install --save express-handlebars@3.0

app.engine = engine method this registers a new templating engine in case we're using one which is not built-in, pug was built-in kind of, express handlebars is not
  to register this, we have to define a name for our engine 

const app.engine("handlebars", expressHbs());
app.set("view engine", "handlebars");
app.set("view engine", "pug");
app.set("views", "views");


CONVERTING OUR PROJECT TO HANDLEBARS

Extension name which only applies to the layout and not to all files


// WORKING WITH EJS
Now ejs is a templating engine which is just like pug, supported out of the box so we don't need

to register the engine as we did it with handlebars,
ejs does not support layouts but we will find a solution to at least have some kind of reusability

// WORKING ON THE LAYOUTS WITH PARTIALS
	We can do this combined with a keyword offered by ejs,

the include keyword which allows us to include a certain element into this page and then you close that

with the normal ejs tag, without the minus.

Now here in include, you simply add a string which holds the path to the file you want to include and

you have to enter this path as it's seen from the file you're in,



// WRAP UP


/// MVC  ( MODEL VIEW CONTROLLER )


MODELS
. Represent your data in your code
.work with your data (e.g. save,fetch)
                                     
VIEWS 
. What the user sees
. Decoupled from your application code
                               
CONTROLLERS  ---- Routes   --- Split across Middleware functions
. connecting your Models and Your Views
. Contain the "in-between"  logic


// ADDING CONTROLLERS
// FINISHING THE CONTROLLERS

// ADDING A PRODUCT MODEL


// STORING DATA IN FILES VIA THE MODEL

we need to be able to work with the file system,

so I will import fs from the core fs module.

Now that file should then also be created in special path, so I will use the path tool,

the path module to construct a path that works on all operating systems.

Now here in save, I will then create my path and I will do that with path join,

so using the path core module, whoops,

and I name this p so that I avoid namespace clashes and the path should be my root directory.

you can create a read stream with this function but we can read the entire file here,


/ and I will put my json data into it,

so again I will use that json helper object

and now there is the stringify find method which takes a javascript object or array and converts it

into json

so that this has the right format,

so there I will take this products array and convert this to json

and then this gets written to the file.

// FETCHING DATA FROM FILES VIA MODEL

// REFACTORING THE FILE STORAGE CODE

// MODULE SUMMARY

  MODEL => model serves the purpose

of representing our data and of managing our data, saving it, fetching it, later also updating it and so

on. And it doesn't matter if you manage your data in memory, files or databases,

it is the model which is responsible for your data,

it contains all the data related logic.

VIEW => The view on the other hand is responsible for presenting it to the user, is responsible for what the

user sees and it shouldn't contain too much logic which might remind you of the handlebars templating


CONTROLLER => Connects Model and View
	Should only make sure that the two can communicate (in both directions) 


/// [TIMESTAMP IN DESCRIPTION]  - SSR and Client side Rendering 

chrome as a browser, IT only understands HTML, CSS and JAVASCRIPT.



// CLIENT SIDE RENDERING
angular, React and plain javascript all are client side rendering

Your Html css and js - it gets completely downloaded.

Disadvantage - first load is heavy, but it get cached for next time.


/// OPTIONAL : ENHANCING THE APP

// Creating the shop structure
  ***   ../   means up one level

// create two new subfolder in views folder
//  shop and admin folder
// then add some files in shop folder- cart.ejs, index.ejs, product-detail.ejs, and product-list.ejs
// and in admin folder we create files like - add-product.ejs, edit-product.ejs and product.ejs 



/// Registering the routes

when we click on add product the next function will be add through routes or links add through routes

// routes helps to get path to that file through link or address

//  I will add

a new get route because I want to load a new page and that will just be /products.

// So now we might be back to actually using a shop controller and a new admin controller so that we can
split our logic by these two sections,

// I will export a new page and that should be my get index function

// We also need to load the cart and checkout pages and therefore let's go back to the shop controller

// we see that the path is not defined,

so what I'm missing here is that for my 404 controller, the error controller to be precise,

I also need to add a path here because I try to extract that path in my navigation and therefore I

also should set the path here and I can set it to /404,


/// STORING THE PRODUCT DATA

// So now we got all these fields here which we need to add a product

and these are automatically added to the request which is sent to the backend because we are using regular

html inputs in a form and we assigned names,

so now we can extract all that data up by the names we assign to our input fields here.

//and now we create a product with all that data.

Now with that, in the next step, let's also extract that data and show it when we show all products.



///  DISPLAYING PRODUCT DATA

// Now you can press add products and right now this does not support decimal numbers, to fix this,

we can change something in the add product view, there on the number input

we simply have to add a step attribute and set the step to 0.01,

this means you can have well two decimal places essentially and increment in this step size.

/// EDITING AND DELETING PRODUCTS

// a == anchor tag is used in html to add a link

/// ADDING ANOTHER ITEM

*****
Attached, you find the source code for this section.

When using my source code, make sure to run npm install in the extracted folder!

// To get in deep with MVC
 =----   https://developer.mozilla.org/en-US/docs/Glossary/MVC


////  DYNAMIC ROUTES AND ADVANCE MODELS


/// module intro
//  Passing route Params
//Using Query Params
// Enhance our Models


///Applied Changes
What changed in the attached files?

Basically, a mobile navigation (for smaller/ mobile screens) was added. Besides that, only minor things were fixed.

/// ADDING THE PRODUCT ID TO THE PATH

//* I'll add a new property

by writing this ID

and this adds a new property to the entire product object we're working on

// Now we just want to make sure that we of course then also are able to handle that and extract

that unique ID from the path in our routes file

so that we

or in the controller, so that we can load the correct product and show the details for it

and that is the whole idea here.

We send some information as part of the path so that we can extract all the data we need for the product


/// EXTRACTING DYNAMIC PARAMS
**** VERY IMPORTANT 

//we can get access to it by accessing our request and then expressjs already gives us a params

object on our request

and on that params object, we can access our product ID and we can access product ID here because we

use product ID in our route shop.js file as a name after the colon.



/// *** LOADING PRODUCT DETAIL DATA

//I can find it

by searching products with the find method, a default javascript method,

this will execute a function we pass to find on every element in the array and we'll return the element

for which this function we pass returns true.

So this function we pass here will get

the product it's currently looking at because it executes it for all the products in the array.



//// **** RENDERING PRODUCT DETAIL VIEW



////**** Passing Data WITH POSt  REQUEST


//  However here, I will send a post request right,

add to cart sends a post request and this has one important implication,

we can pass data in the request body.

This was not possible for a get request but for post request you typically use the request body,

this is also what we use when adding a product. For adding a product,

we have a form and as I mentioned there when we added this the first time in the course, this automatically

gives us a request which puts all the input data and so on into its body

but this only works for posting data,

this is not available for getting data but for posting data,

//  we can also add an include add

to cart ejs and put that entire code into that include here and then simply well include that include.

So instead of having that code here in index.ejs, we can use the ejs tag with the minus to add include

and then we go to well up one level and then into includes and then add to cart and we use that

same code also in the product detail page here and also in the product list page.

So there I also want to replace this form with my include.





//// *****ADDING A CART MODEL

// Add a new model here cart.js
// cart is like a separate entity in our project.
//  we have to think about how we want to manage that cart.

Now obviously we want to have a cart that holds all the products that we added

and we also want to group products by id and increase their quantity in case we add a product more

than once.

So to do all of that, I will first of all create a constructor here which allows us to create a new cart.


//Now what we need on this cart though is a way to add and remove our products

obviously. Now the problem we have is the cart itself is not really an object we'll constantly recreate,

not for every new product that we add we want to have a new cart, instead there always will be

a cart in our application and we just want to manage the products in there

//*  I don't really add a constructor instead I'll add a static method, add product like this.

Now this will take the ID of the product I want to add and the goal here will be to then fetch the

old or previous cart from our file for now, analyze that and see if we already have that product,

find existing product and then add new product or increase the quantity


//// USING QUERY PARAMS  
//   I want to render the same form I have for add-product.

The difference will be that I want to pre-populate that form

with the values of the product I wanna edit.

Now, if I'm using the same HTML code in the end,

it would make sense to reuse the same template.

If you ever plan on using a different one,

it doesn't, but here it makes sense.

So what I'll do is I'll take my add-product.ejs code

and move it into edit-product

because I find this to be the more generic name

and I'll delete the add-product.ejs file.

So now we just have edit-product.ejs

with all the HTML code in there that we need.

// we delete the add-product.js file

//But let's say we want to get an additional confirmation

by ensuring that people have to pass us

a so-called query parameter in the URL.

A query parameter can be added to any URL

by adding a question mark

and then a key-value pair, separated by an equal sign,

like edit equals true.

And you can have multiple query parameters

by separating them with ampersands.

So we could also have title equals new, for example.

So this is possible

and this is so-called optional data.

The path here, the route which gets reached

is determined by the part up to the question mark.

So you don't need to add any information

about query parameters you might get

to your routes file.

These paths are not affected.

But you can always check for query parameters

in your controllers.

So here we can check if const editMode,

if this is set by going to our request

and there will be a query object.

This is also created and managed by Express.js.

And you can access your data here

by simply trying to access the keys you got

in your query parameters.
// query object is also created and managed by express.js

// Important: The extracted value always is a string!  So "true" instead of true.




//// **** PRE POPULATING THE EDIT PRODUCT PAGE WITH DATA



////**** LINKING THE EDIT PRODUCT PAGE


////****  EDiting the product Data




////**** ADDING THE PRODUCT-DELETE FUNCTIONALITY

// now I want to delete a product. So let's add a delete method in there

and what I plan on doing here is I actually want to turn this into a static method and maybe name this

delete by ID, pass in an ID and then have all the logic for deleting a product in here. To do this

I first of all need to find out which product to remove or update my array of products so that I can then

write it back to my file.

So just as in find by ID, I will call it get products from file to get all the products and in here,

I then have the products array,

there I now need to find the index on the product I want to delete.

So I will use products and then the find method to go through all my products and find the product with

the ID

I'm trying to delete, this is a mechanism we did before, whoops, it should be find index though.

Now this means I can update my products array such that this element is removed and actually there is

even a shortcut we can use.

I can create a new constant, updated products, take my existing products and not use find index but use

the filter method instead. Filter

also takes an anonymous function and will return me all elements as part of a new array that do match

the criteria

my function returns.

So if this returns true,

the element is kept.

Now I want to keep all elements where the ID of the element is not equal to the ID I'm trying to delete

because all elements where the ID is not equal should be kept

around, should be part of the new array which will be the array I save

back to my file.


////**** DELETING CART ITEMS

// Now by the way a little side note, it would be best if we have a callback in delete by ID so that we

only redirect once we're done

and the same is also true for updating

by the way. There the callback in save would be best for redirecting, for now I'll not do this, later

we will add this little functionality. 



////**** DISPLAYING CART ITEMS ON THE CART PAGE

// remember p simply is that object

we passed t that cart products array on our backend code.

////**** DELETE CART ITEMS

////* FIXING A DELETE PRODUCT BUG



//// wrap up dynanmic ROUTES AND ADVANCED MODELS

// Dynamic Routing
	* you can pass dynamic path segments by adding a ":" to the Express Router path.
	* The name you add after ":" is the name by which you can extract the data on req.params
	* Optional (query) parameters can also be passed (?param=value&b=2) and extracted (req.query.myParam)

// More on Models
	* A cart model was added -it holds static method only
	* You can interact between models (e.g. delete cart item if a product is deleted)
	* Working with files for data storage is suboptimal for bigger amounts of data


****  https://expressjs.com/en/guide/routing.html

/////////////////////////////////////////////////////////////////////////////////


***** SQL

// SQL keywords are NOT case sensitive: select is the same as SELECT
//Some database systems require a semicolon at the end of each SQL statement.


///*  SETTING UP MYSQL

///* Connecting OUR APP TO SQL DATaBASE

****
*****
To use SQL or to interact with SQL from inside node, we need to install a new package 
	npm install --save mysql2

	it will be a production depedendency which is crucial part of our application

//* One is that we set up one connection which we can then use to run queries and we should always close

the connection once we're done with a query and

the downside is that we need to re-execute the code to create the connection for every new query

and there will be a lot of queries because we fetch data, we write data, we delete data, creating new connections

all the time quickly becomes very inefficient both in our code and also regarding the connection to

the database which is established and the performance this may cost. 

So a better way is to create a so-called connection pool
So to set up such a pool, I'll create a new constant pool,
the name is up to you and I'll use that MySQL object and there
I will call create pool and there you also see that create connection we could use. Now I don't want
a single connection but a pool of connections which will allow us to always reach out to it whenever
we have a query to run and then we get a new connection from that pool which manages multiple connections
so that we can run multiple queries simultaneously because each query needs its own connection and once
the query is done, the connection will be handed back into the pool and it's available again for a new query
and the pool can then be finished when our application shuts down.


////*** Retrieving Data


////**** FETCHING PRODUCTS
	// Destructuring 

///** INSERTING DATA INTO DATABASE 

////** FETCHING A SINGLE PRODUCT WITH THE WHERE CONDITION






/////****** SEQUELIZE
 Sequelize is a third party package, to be

precise

it's an object relational mapping library

and this is a pretty long name which simply means it does all the heavy lifting, all the SQL code

//*** to install sequelize

 we first of all have to install sequelize and just as we installed all the other

packages, we'll do this by 
					running
						 npm install --save sequelize 
because this also is a production dependency,
it's a core dependency of our project and then the name is sequelize, like this.

// Now sequelize uses MySQL 2 behind the scenes


//// DEFINE A MODEL


//// SYNCING JS DEFINITION TO DATABASE

//// INSERTING DATA AND CREATING A PRODUCT


MUST READ: findById() in Sequelize 5
One quick note:
With Sequelize v5, findById() (which we'll use in this course) was replaced by findByPk().
You use it in the same way, so you can simply replace all occurrences of findById() with findByPk()



///// **  GETTING A SINGLE PRODUCT WITH THE "WHERE" CONDITION

//// * FETCHING ADMIN PRODUCTS

////** UPDATING PRODUCTS USING SQL



//// DELETING PRODUCTS
 We get the product ID which is good, now delete by ID does not exist in a sequelize
world, instead on the product we can call destroy and destroy allows us to destroy any product we find
through our options here
and these options allow us to for example add a where condition to narrow down which product to delete.




//////**** CREATING A USER MODEL
So it's now time to introduce more models and I will introduce a brand new model before I start working
on the cart again,
that new model will be my user model but
for now we have no real authentication process, so we'll only work with one dummy user who doesn't really
have to log in, authentication will follow later in the course but I still want to show you how you could have a user
who did create a product and who therefore is connected to that product and at the same time, a user
should own a cart and that cart will hold multiple products
and this is how we can then overall connect everything.
So I'll add a user.js file in the models folder and in there first of all, let's define a user model.


/ We can then define a user and store the user in a user constant by calling sequelize define, I'll name the
model user like this
and then as an object you define the structure of the user.
I want to have an ID for my user and the type here will be sequelize
integer,


///// ADDING ONE-TO-MANY RELATIONS 

I'll go to my app.js file and before I sync all my data to the database, I want to define my models.
So for this I will add more imports and I will import my product model by requiring this from the models
file and there the product file, add a models folder in the product file and I'll import my user model from
the user file in the models folder. With the two models imported, we can relate them and I will relate
them here in the same place where I sync
sequelize
but before I sync it. Here I can basically say that a product belongs to a user.

/ ** **  The one problem we have right now is that we already created the products table and therefore will
not override it with the new information and we can ensure that it will by setting force to true.
Of course a setting you wouldn't really use in production because you don't always want to overwrite
your tables all the time
but here during development, I want to reflect my new changes so I'll set this to true and therefore
after restarting, we indeed see a couple of statements were executed.
First of all it dropped any existing tables and then it created a new table, users with all the set up
and then it also creates a new products table and besides adding all the fields there,
it also defined that there is a new field, the user id field which is an integer and which is a foreign
key that references the ID field in the users table and that on delete, it should cascade
and on update cascade is the default.



///////*****  CREATING AND MANAGING A DUMMY USER

1. I will remove this force through call because I don't always want to overwrite my tables
otherwise all our products and so on will always be gone,

2. As a next step, I'll
will register a new middleware because I want to store that user in my request so that I can use it
from anywhere in my app conveniently.

3.so we are guaranteed to find a user here. So we can find a user by id here

and what do we want to do with my user in the then block then?

Well I want to store it in a request.

So here I will set request user equal to user and we can do that,

we can simply add a new field to our request object,

we should just make sure we don't overwrite an existing one, like body. But user is undefined by default,

now I'm storing the user I retrieved from the database in there.

40So with that, all I need to do is I need to call next here of course so that we can continue with the

next step if we get our user and stored it.

Now with that, we've got the user set up and retrieved, let's now make sure that we can also use it to create

new products that are associated to that user.




/////******  USING MAGIC ASSOCIATION METHODS

1. we need to pass in extra information regarding our user that is associated. One way of doing this is
that we set this new user ID field we got, keep in mind user ID was added as a database field because
we now have a relation set up and we set this to request user ID,
keep in mind that request user is the sequelize user object which holds both the database data there for that
user as well as the helper methods.

2. we don't manually

have to set the user ID.
We can use another cool feature of sequelize, we can use our user object as it's stored in the request and
always keep in mind, this is a sequelize object with all the magic features and there we'll actually have
a create product method.
sequelize adds methods that allow us for example
to create a new associated object.



///////**** FETCHING RELATED PRODUCTS
1.Well for get added product, there's no implication, we fetch a single product here and we can do this as before,
we don't really care about the user here,
you could argue that you only want to find products for the currently logged in user though. Then what
you actually want to do is you want to use request user get products
and there define where ID equals prods ID to also have that filter and then you can chain your normal
then call and so on.

/////*** ONE-TO-MANY AND MANY-TO-MANY RELATIONS

1.Now from a relation or association
perspective,
a cart should belong to a user and a cart that in turn simply holds products, many products witha quantity
associated to them.
So actually we need more than one model

2..  Well we have to keep in mind that a cart should belong
to a single user but may hold multiple products.
The carts table however should hold the different carts for the different users, so we'll not just need the
carts table and model, we'll also need a new cart item.js
file and in there,

3... Now the ID of the cart to which this is related doesn't have to be added by us here because we
will again create an association and let sequelize manage this, so it's time for some associations then.
Let's go to the app.js file here and in there, time to add more associations besides product and user.

4... Next I will add my cart here and say that this cart belongs to many products and on the other hand, a

product belongs to many carts, it's a many-to-many relationship because one cart can hold multiple products

and a single product can be part of multiple different carts.

This only works with an intermediate table that connects them which basically stores a combination

of product IDs and cart IDs

and for that, I created my cart item model.

4.. so something went wrong here when sequelize tried to create our tables because it looks like we got some

error in one of our models.

And the thing is the ID here in cart item, that should be an integer not a string, same in cart, should

be an integer not a string.


/////*** CREATING AND FETCHING A CART

1.. To work with our new cart let's go to the controllers folder here and there to the shop.js file which

is where we have our cart related actions. Get products get product, get index, that is all working, get

cart however will not work.

2.. Remember a cart is associated to products in our app.js file through belongs to many and sequelize

will do the magic of looking into cart item and so on,

so into this

in-between table.

3.. Now in the next step where I get that user, I will also create a cart by adding user create cart, like this

and I don't need to pass any data in there because cart in the beginning will not hold any special

data, it just needs to be there.

I'll then return this and only listen in the next step

where I get my cart

so to say and with this now set up, you see an insert into carts call is done here


///////*************  ADDING NEW PRODUCTS TO THE CART

1. The post cart method is responsible for adding new products to the cart.

2.. I'll first of all get access to the cart in exactly the same way I did it up there in get cart with request
user get cart and then my then block,
so I'll repeat that and then have then and thereafter also catch here

3. Now the third step is that I want to find out if the product I'm trying to add is already part of the
cart because if it is, then I just need to increase the quantity,
if it's not I need to add it with a quantity of one.


///////// ********************   ADDING EXISTING PRODUCTS AND RETRIEVING CART ITEMS

1. So let's ensure we can see items on the cart page

and the problem is that right now, this does not work because here on cart.ejs

we're still accessing product data for every product we loaded but the products we have here are

now just the products from our database.

2. So let's make sure we also handle this case, that we add a product to the cart which is already part of the
cart and that should of course simply increment the quantity then.


//////***** DELETING RELATED ITEMS AND DELETING CART PRODUCTS 




/////////**********  ADDING AN ORDER MODEL

1. Now one thing is missing and that are the orders. Now
I'll not add a real checkout flow here
but I want to have a checkout button in my cart which will basically for now immediately move all the
elements in this cart out of this cart,
so clear the cart and instead create a new order, an order that is related to a couple of products and
a user.

2. Let's start with the model and for this, I'll create a new order.js file and copy my cart
item.js file,
move it in there,
import sequelize,
rename it here to order

3.If we go to the app.js file where we do set up all the relations, I'll import my order here from the order, whoops,
from the order file and I'll import my order item from the order item file
but now if we connect the models here at the bottom, we can say that an order belongs to a user and it doesn't
belong to many users because a single order is always belonging to one user who placed the order and the
user may of course have many orders, like this.
So this is not a many-to-many relationship, 


//////////********  STORING CARTITEMS AS ORDERITEMS



/////////*********  RESETTING THE CART AND FETCHING AND OUTPUTTING ORDERS

1.   one thing is missing and that is that we clear the cart,
I want to do this right after we edit the orders.
So down there I need to work with the cart and therefore first of all, I'll store it in a new variable, fetch
cart,
initially it's empty
and here once I got the cart, I'll store the cart in the fetch cart variable so that I can also use
it down there.

2. I actually show my orders and we can get rid of the checkout

page here for now because we have no such step at the moment.

So now let's make sure we also retrieve the orders correctly and can display them on our orders page. For

this here,

I'll first of all get my user

and now I'm interested in the orders of this user which I can get with get orders,

a magic method added by sequelize,

thanks to our associations. Here we again get a promise, let's log any potential errors we get

and in the then block, I know that I have my orders.

This is where I want to render my orders page therefore and I will pass a new variable into that

page,

the orders variable which simply stores all the retrieved orders. So with that I got my orders for this

user,

now let's go to the respective view in the views folder,

here's the orders.ejs file which always shows nothing there.



//////////////***** WRAP UP

SQL 
* SQL uses strict data schemas and relations
* You can connect your Node.js app via packages like mysql2
*Writing SQL quaries is not directly related to Node.js and something you have to learn in addition to Node.js


* SEQUELIZE

* Instead of writing SQL quaries manually, you can use packages (ORMs) like Sequelize to focus on the Node.js code and work with native JS objects

* Sequelize allows you define models and interact with the database through them 
* You can also easily set up relations ("Associations") and interact with your related models through them










/////////////////////////////////////////////////////////////////////////////////

NoSQL Databases / MongoDB
